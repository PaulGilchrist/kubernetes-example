kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: local-sc
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
spec:
  storageClassName: local-sc
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  volumeName: mongodb-pv
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolume
metadata:
    name: mongodb-pv
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-sc
  local:
    path: /Users/Shared/mongodb
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
            - docker-desktop
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
spec:
  serviceName: mongodb-service
  replicas: 1
  selector:
    matchLabels:
      app: mongodb # has to match .spec.template.metadata.labels
  template:
    metadata:
      labels:
        app: mongodb # has to match .spec.selector.matchLabels
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: mongodb
        command: ["mongod"]
        args: ["--dbpath=/data/db", "--bind_ip_all"] # , "--auth", "--keyFile", "/data/db/keyfile", "--replSet", "rs0"
        image: mongo:latest
        ports:
        - containerPort: 27017
          name: mongodb
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db # must match configmap dbPath and "command" args
      volumes:
      - name: mongodb-data
        persistentVolumeClaim:
          claimName: mongodb-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
spec:
  externalTrafficPolicy: Cluster
  ports:
  - protocol: TCP
    port: 27017
    targetPort: 27017
  selector:
    app: mongodb
  type: LoadBalancer
---
apiVersion: batch/v1
kind: Job
metadata:
  name: mongodb-insert
spec:
  template:
    spec:
      initContainers:
      - name: init-wait-for-db
        image: alpine
        command: ["/bin/sh", "-c", "for i in $(seq 1 300); do nc -zvw1 mongodb-service 27017 && exit 0 || sleep 3; done; exit 1"]
      containers:
        - name: mongodb-insert
          env: 
            - name: mongoDbConnectionString
              value: mongodb://mongodb-service:27017 # uses the service name for the DB created above
          image: paulgilchrist/mongodb-insert:latest
      restartPolicy: Never
  backoffLimit: 0
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb-api
spec:
  serviceName: mongodb-api-service
  replicas: 1
  selector:
    matchLabels:
      app: mongodb-api # has to match .spec.template.metadata.labels
  template:
    metadata:
      labels:
        app: mongodb-api # has to match .spec.selector.matchLabels
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: mongodb-api
        env: 
        - name: ConnectionString
          value: mongodb://mongodb-service:27017 # uses the service name for the DB created above
        - name: DatabaseName
          value: mongotest
        - name: ContactsCollectionName
          value: contacts
        image: paulgilchrist/mongodb-api:latest
        livenessProbe: # Defines the health checking
          tcpSocket: # TCP probe
            port: 80
          initialDelaySeconds: 30 # length of time to wait for a pod to initialize after pod startup, before applying health checking
          timeoutSeconds: 1
        ports:
        - containerPort: 80
          name: mongodb-api        
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-api-service
spec:
  externalTrafficPolicy: Cluster
  ports:
  - protocol: TCP
    port: 8081
    targetPort: 80
  selector:
    app: mongodb-api
  type: LoadBalancer
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb-web
spec:
  serviceName: mongodb-web-service
  replicas: 1
  selector:
    matchLabels:
      app: mongodb-web # has to match .spec.template.metadata.labels
  template:
    metadata:
      labels:
        app: mongodb-web # has to match .spec.selector.matchLabels
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: mongodb-web
        image: paulgilchrist/mongodb-web:latest
        livenessProbe: # Defines the health checking
          tcpSocket: # TCP probe
            port: 80
          initialDelaySeconds: 30 # length of time to wait for a pod to initialize after pod startup, before applying health checking
          timeoutSeconds: 1
        ports:
        - containerPort: 80
          name: mongodb-web        
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-web-service
spec:
  externalTrafficPolicy: Cluster
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 80
  selector:
    app: mongodb-web
  type: LoadBalancer